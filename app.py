
import streamlit as st
import pandas as pd
import re
import folium
from streamlit_folium import st_folium
from modules.geocode import geocode_address

st.set_page_config(layout="wide")
st.title("–ö–æ–Ω—Ç—Ä–æ–ª—å –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–æ–≤ | –ú–û–°–≠–ù–ï–†–ì–û–°–ë–´–¢")

def is_probable_address(value):
    if not isinstance(value, str):
        return False
    if any(x in value.lower() for x in ["—É–ª", "—É–ª–∏—Ü–∞", "–ø—Ä–æ—Å–ø", "–≥.", "–≥–æ—Ä–æ–¥", "–¥.", "–¥–æ–º", "—Ä-–Ω"]):
        return True
    return False

def is_kad_number(value):
    return isinstance(value, str) and bool(re.match(r"^\\d{2}:\\d{2}:\\d{6,7}:\\d+$", value))

uploaded_file = st.file_uploader("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏", type=["xlsx"])
if uploaded_file:
    df = pd.read_excel(uploaded_file)
    st.subheader("üìã –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    st.dataframe(df)

    address_column = None
    for col in df.columns:
        sample = df[col].dropna().astype(str).head(50)
        score = sum([is_probable_address(v) or is_kad_number(v) for v in sample])
        if score / len(sample) > 0.3:
            address_column = col
            break

    if not address_column:
        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü —Å –∞–¥—Ä–µ—Å–∞–º–∏.")
    else:
        st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü —Å –∞–¥—Ä–µ—Å–∞–º–∏: **{address_column}**")

        df["is_kadastr"] = df[address_column].apply(is_kad_number)
        df["is_address"] = df[address_column].apply(is_probable_address)
        df["status"] = df.apply(lambda row: "–∫–∞–¥–∞—Å—Ç—Ä" if row["is_kadastr"] else (
            "–∞–¥—Ä–µ—Å" if row["is_address"] else "–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π"), axis=1)

        st.subheader("üü¢ –í–∞–ª–∏–¥–Ω—ã–µ –∞–¥—Ä–µ—Å–∞")
        valid_df = df[df["status"] == "–∞–¥—Ä–µ—Å"]
        st.dataframe(valid_df)

        st.subheader("‚öôÔ∏è –î–µ–π—Å—Ç–≤–∏—è")
        if st.button("üìç –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∞–¥—Ä–µ—Å–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –¥–æ–ª–≥–∞"):
            st.info("‚è≥ –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ...")
            coords = []
            for _, row in valid_df.iterrows():
                addr = row[address_column]
                lat, lon = geocode_address(addr)
                coords.append((lat, lon))
            valid_df["lat"] = [c[0] for c in coords]
            valid_df["lon"] = [c[1] for c in coords]

            valid_coords = valid_df.dropna(subset=["lat", "lon"])

            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏
            if "–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å" in valid_coords.columns:
                valid_coords = valid_coords.sort_values(by="–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å", ascending=False)

            # –ö–∞—Ä—Ç–∞ —Å —Ç–æ—á–∫–∞–º–∏
            st.subheader("üó∫Ô∏è –ö–∞—Ä—Ç–∞ –∞–¥—Ä–µ—Å–æ–≤ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –¥–æ–ª–≥–∞")
            if not valid_coords.empty:
                m = folium.Map(location=[valid_coords["lat"].mean(), valid_coords["lon"].mean()], zoom_start=11)
                for _, row in valid_coords.iterrows():
                    popup_text = f"{row[address_column]}\\n–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å: {row['–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å']} ‚ÇΩ"
                    folium.Marker(
                        location=[row["lat"], row["lon"]],
                        popup=popup_text,
                        icon=folium.Icon(color="red")
                    ).add_to(m)
                st_folium(m, width=900, height=600)

                # –°–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤
                st.subheader("üìÑ –°–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –¥–æ–ª–≥–∞:")
                for _, row in valid_coords.iterrows():
                    st.markdown(f"- **{row[address_column]}** ‚Äî {row['–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å']} ‚ÇΩ")
            else:
                st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞.")
